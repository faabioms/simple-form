---
- name: ec2 launcher
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    region: us-east-1
    security_group: default_sg_webserver
    security_group_rds: default_sg_webserver_rds
    keypair: amaro-dev
    db_password: 123123123
    db_user: root
    db_port: 3306 
  tasks:
  - name: Create a security group
    ec2_group:
      name: "{{ security_group }}"
      description: The webservers security group
      region: "{{ region }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
    register: security_group
  - name: Create a rds security group
    ec2_group:
      name: "{{ security_group_rds }}"
      description: The rds security group
      region: "{{ region }}"
      rules:
        - proto: tcp
          from_port: 3306
          to_port: 3306
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
    register: security_group_rds
  - name: Launching ec2
    ec2: 
      instance_type: t3.micro
      key_name: "{{ keypair }}"
      image: ami-0cfee17793b08a293
      region: "{{ region }}"
      group_id: "{{ security_group.group_id }}"
      count: 1
      vpc_subnet_id: subnet-4a2cc32d
      wait: yes
      assign_public_ip: yes
      instance_profile_name: RDSFullAccessFromEC2
      instance_tags: 
          Name: ansible-ec2
    register: ec2
  - name: create RDS instance
    rds:
      command: create
      region: "{{ region }}"
      instance_name: RDS-webserver
      db_engine: MySQL
      size: 10
      instance_type: db.t2.micro
      username: "{{ db_user }}"
      password: "{{ db_password }}"
      tags:
        Environment: testing
        Application: webserver
    register: rds
  - debug:
      msg: "The new db endpoint is {{ rds.instance.endpoint }}"
  - name: Create MySQL database
    mysql_db:
      login_host: "{{ rds.instance.endpoint }}"
      login_user: "{{ db_user }}"
      login_password: "{{ db_password }}"
      login_port: "{{ db_port }}"
      name: flaskapp
      state: import # if RDS exist, you must change import to present
      target: "basic-db.sql"
  - name: Wait for SSH to come up
    wait_for:
      host: "{{ item.public_ip }}"
      port: 22 
      state: started
    with_items: "{{ ec2.instances }}"
  - name: Add the newly created host so that we can further contact it
    add_host:
      name: "{{ item.public_ip }}"
      groups: webservers
    with_items: "{{ ec2.instances }}"