---
- name: ec2 launcher
  hosts: localhost
  connection: local
  gather_facts: true
  vars:
    region: us-east-1
    azones_1a: us-east-1a
    azones_1c: us-east-1c
    subnetid: subnet-73365216
    keypair: mypem
    ami_image: ami-0cfee17793b08a293
    security_group: default_sg_webserver
    security_group_rds: default_sg_webserver_rds    
    db_password: 123123123
    db_user: root
    db_port: 3306
  tasks:
  - name: Get my current IP address
    uri:
      url: http://checkip.amazonaws.com/
      return_content: yes
    register: my_ip
  - name: Create a security group
    ec2_group:
      name: "{{ security_group }}"
      description: The webservers security group
      region: "{{ region }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
    register: security_group
  - name: Create a rds security group
    ec2_group:
      name: "{{ security_group_rds }}"
      description: The rds security group
      region: "{{ region }}"
      rules:
        - proto: tcp
          from_port: "{{ db_port }}"
          to_port: "{{ db_port }}"
          group_name: "{{ security_group.group_id }}"
          group_desc: allow MYSQL access from webserver security group
        - proto: tcp
          from_port: "{{ db_port }}"
          to_port: "{{ db_port }}"
          cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
    register: security_group_rds
  - name: Create the ELB only listening over port 80
    ec2_elb_lb:
      name: "ansible-ec2-load-balancer"
      state: present
      region: us-east-1
      zones:
        - "{{ azones_1a }}"
        - "{{ azones_1c }}"
      listeners:
        - protocol: http
          load_balancer_port: 80
          instance_port: 80
    register: elb
  - name: Launching ec2
    ec2:
      instance_type: t2.micro
      key_name: "{{ keypair }}"
      image: "{{ ami_image }}"
      region: "{{ region }}"
      group_id: "{{ security_group.group_id }}"
      count_tag:
        Name: ansible-ec2
      exact_count: 2
      vpc_subnet_id: "{{ subnetid }}"
      wait: yes
      assign_public_ip: yes
      instance_tags:
          Name: ansible-ec2
    register: ec2
  - name: create RDS instance
    rds:
      command: create
      region: "{{ region }}"
      vpc_security_groups: "{{ security_group_rds.group_id }}"
      instance_name: RDS-webserver
      db_engine: MySQL
      size: 10
      wait: yes
      wait_timeout: 600
      instance_type: db.t2.micro
      username: "{{ db_user }}"
      password: "{{ db_password }}"
      tags:
        Application: webserver
    register: rds
  - debug:
      msg: "The new db endpoint is {{ rds.instance.endpoint }}"
  - name: Create MySQL database
    mysql_db:
      name: flaskapp
      login_host: "{{ rds.instance.endpoint }}"
      login_user: "{{ db_user }}"
      login_password: "{{ db_password }}"
      login_port: "{{ db_port }}"
      state: import
      target: "basic-db.sql"
    ignore_errors: yes
  - name: Wait for SSH to come up
    wait_for:
      host: "{{ item.public_ip }}"
      port: 22 
      state: started
    with_items: "{{ ec2.instances }}"
  - name: Add the newly created host so that we can further contact it
    add_host:
      name: "{{ item.public_ip }}"
      groups: webservers
    with_items: "{{ ec2.tagged_instances }}"
  - name: Add EC2 instances as known hosts
    known_hosts:
      name: "{{ item.public_ip }}"
      key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item.public_ip) }}"
    with_items: "{{ ec2.tagged_instances }}"
  - name: Add each EC2 instance to the ELB
    ec2_elb:
      state: present
      ec2_elbs: ansible-ec2-load-balancer
      region: "{{ item.region }}"
      instance_id: "{{ item.id }}"
    with_items: "{{ ec2.tagged_instances }}"
    ignore_errors: yes
  - name: debug
    debug: msg="{{ elb }}"